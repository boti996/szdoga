TODO:
1. Súlyozás a képletbe -> előlrről tanítani --> 1-es freeze-zel továbbtanítani --> kiértékelés
2. Kinullázásos módszer pruningra
3. model compile módszer pruningra
4. indexeléses módszer pruningra
5. Új hiba, súlyozni a 3 kimenet felhasználásával
6. Blokkonkénti tanítás + lefagyasztás
7. alulról tanítás
8. MobileNetv2 betanítás szegmentálásra

Lépések:
    - Resblock eltávolítós kiértékelések
        - MobNetes mod megcsinálása tisztességesen
        - tudás desztilláció felülről kezdve
    - tudásdesztilláció a többi réteg lefagyasztásával!!!
    - tudásdesztilláció felülről blokkonként, nem blokk-blokkonként
- tudás desztilláció alulról kezdve
        - OpenCV-re cserélni a PIL-t
    - loss szorzók törlése, ha nem jól tanul
    - Fine-tuning vizsgálata (freeze_body-val és nélküle)
- Darknet variáns 1: sep conv2d tanítás!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
- Darknet variáns 2: mobnet blokkos tanítás
- Eredeti képarány megtartása
- kódot rendbe rakni a végén  + kommentek



Utolsó 2 resblockos blokkot lecserélve:
Total params: 44,684,227
Trainable params: 44,592,195
Non-trainable params: 92,032
avg_duration: 0.17230662486383824

Defaulttal:
Total params: 61,603,267
Trainable params: 61,550,659
Non-trainable params: 52,608
avg_duration: 0.18159049874721475



model.py mentés
"""YOLO_v3 Model Defined in Keras."""

from functools import wraps

import numpy as np
import tensorflow as tf
from keras import backend as K
from keras.activations import linear
from keras.layers import Conv2D, Add, ZeroPadding2D, UpSampling2D, Concatenate, MaxPooling2D, SeparableConv2D, ReLU, \
    Activation, DepthwiseConv2D
from keras.layers import LeakyReLU
from keras.layers import BatchNormalization
from keras.models import Model
from keras.regularizers import l2

from model.yolo3.utils import compose


@wraps(Conv2D)
def DarknetConv2D(*args, **kwargs):
    """Wrapper to set Darknet parameters for Convolution2D."""
    darknet_conv_kwargs = {'kernel_regularizer': l2(5e-4),
                           'padding': 'valid' if kwargs.get('strides') == (2, 2) else 'same'}
    darknet_conv_kwargs.update(kwargs)
    return Conv2D(*args, **darknet_conv_kwargs)


@wraps(SeparableConv2D)
def MobilenetSeparableConv2D(*args, **kwargs):
    """Wrapper to set Darknet parameters for SeparableConvolution2D."""
    darknet_conv_kwargs = {'kernel_regularizer': l2(5e-4),
                           'padding': 'valid' if kwargs.get('strides') == (2, 2) else 'same'}
    darknet_conv_kwargs.update(kwargs)
    return SeparableConv2D(*args, **darknet_conv_kwargs)



def DarknetConv2D_BN_Leaky(*args, **kwargs):
    """Darknet Convolution2D followed by BatchNormalization and LeakyReLU."""
    no_bias_kwargs = {'use_bias': False}
    no_bias_kwargs.update(kwargs)
    return compose(
        DarknetConv2D(*args, **no_bias_kwargs),
        BatchNormalization(),
        LeakyReLU(alpha=0.1))


def MobilenetConv2D_BN_ReLU6(*args, **kwargs):
    """Darknet Convolution2D followed by BatchNormalization and LeakyReLU."""
    no_bias_kwargs = {'use_bias': False}
    no_bias_kwargs.update(kwargs)
    return compose(
        DarknetConv2D(*args, **no_bias_kwargs),
        BatchNormalization(),
        ReLU(max_value=6))


def MobilenetConv2D_BN_Linear(*args, **kwargs):
    """Darknet Convolution2D followed by BatchNormalization and LeakyReLU."""
    no_bias_kwargs = {'use_bias': False}
    no_bias_kwargs.update(kwargs)
    return compose(
        DarknetConv2D(*args, **no_bias_kwargs),
        BatchNormalization())


def MobilenetSeparableConv2D_BN_ReLU6(*args, **kwargs):
    """Darknet Convolution2D followed by BatchNormalization and LeakyReLU."""
    no_bias_kwargs = {'use_bias': False}
    no_bias_kwargs.update(kwargs)
    return compose(
        MobilenetSeparableConv2D(*args, **no_bias_kwargs),
        BatchNormalization(),
        ReLU(max_value=6))


cutting_layer_out, cutting_layer_in = None, None

def resblock_body(x, num_filters, num_blocks, pruning=-1):
    """A series of resblocks starting with a downsampling Convolution2D"""
    # Darknet uses left and top padding instead of 'same' mode
    x = ZeroPadding2D(((1, 0), (1, 0)))(x)
    x = DarknetConv2D_BN_Leaky(num_filters, (3, 3), strides=(2, 2))(x)

    to_delete = None
    for i in range(num_blocks):

        if i == pruning:
            print(pruning)
            global cutting_layer_out
            cutting_layer_out = x

        y = compose(
            DarknetConv2D_BN_Leaky(num_filters // 2, (1, 1)),
            DarknetConv2D_BN_Leaky(num_filters, (3, 3)))(x)
        x = Add()([x, y])

        if i == pruning + 1:
            global cutting_layer_in
            cutting_layer_in = y

        return x


# TODO: fos
def inverted_resblock_body(x, num_filters, num_blocks, pruning=-1):
    x = ZeroPadding2D(((1, 0), (1, 0)))(x)
    for i in range(0, num_blocks):
        stride = (1, 1)
        if i == 0:
            stride = (2, 2)
        if i == pruning:
            if i == 0:
                x = MobilenetConv2D_BN_Linear(num_filters // 2, (1, 1), stride=stride)(x)
            continue

        y = compose(MobilenetConv2D_BN_ReLU6(num_filters // 2, (1, 1)),
                    MobilenetSeparableConv2D_BN_ReLU6(num_filters // 2 * 6, (3, 3), stride=stride),
                    MobilenetConv2D_BN_Linear(num_filters // 2, (1, 1)))(x)
        x = Add()([x, y])

    return x


out1, out2 = None, None


def darknet_body(x, pruning_mtx):
    """Darknent body having 52 Convolution2D layers"""
    x = DarknetConv2D_BN_Leaky(32, (3, 3))(x)
    x = resblock_body(x, 64, 1, pruning_mtx[0])
    x = resblock_body(x, 128, 2, pruning_mtx[1])

    global cutting_layer_in
    if pruning_mtx[0] == 0:
        cutting_layer_in = x

    x = resblock_body(x, 256, 8, pruning_mtx[2])
    global out1
    out1 = x

    if pruning_mtx[1] == 1:
        cutting_layer_in = x

    x = resblock_body(x, 512, 8, pruning_mtx[3])
    global out2
    out2 = x

    if pruning_mtx[2] == 7:
        cutting_layer_in = x

    x = resblock_body(x, 1024, 4, pruning_mtx[4])

    if pruning_mtx[3] == 7:
        cutting_layer_in = x
    if pruning_mtx[4] == 3:
        cutting_layer_in = cutting_layer_out

    return x


def mod_darknet_body(x, pruning_mtx):
    x = MobilenetConv2D_BN_ReLU6(32, (3, 3))(x)
    x = inverted_resblock_body(x, 64, 1, pruning_mtx[0])
    x = inverted_resblock_body(x, 128, 2, pruning_mtx[1])

    global cutting_layer_in
    if pruning_mtx[0] == 0:
        cutting_layer_in = x
    x = inverted_resblock_body(x, 256, 8, pruning_mtx[2])
    if pruning_mtx[1] == 1:
        cutting_layer_in = x
    x = inverted_resblock_body(x, 512, 8, pruning_mtx[3])
    if pruning_mtx[2] == 7:
        cutting_layer_in = x
    x = inverted_resblock_body(x, 1024, 4, pruning_mtx[4])
    if pruning_mtx[3] == 7:
        cutting_layer_in = x
    if pruning_mtx[4] == 3:
        cutting_layer_in = cutting_layer_out
    return x


def make_last_layers(x, num_filters, out_filters):
    """6 Conv2D_BN_Leaky layers followed by a Conv2D_linear layer"""
    x = compose(
        DarknetConv2D_BN_Leaky(num_filters, (1, 1)),
        DarknetConv2D_BN_Leaky(num_filters * 2, (3, 3)),
        DarknetConv2D_BN_Leaky(num_filters, (1, 1)),
        DarknetConv2D_BN_Leaky(num_filters * 2, (3, 3)),
        DarknetConv2D_BN_Leaky(num_filters, (1, 1)))(x)
    y = compose(
        DarknetConv2D_BN_Leaky(num_filters * 2, (3, 3)),
        DarknetConv2D(out_filters, (1, 1)))(x)
    return x, y


def yolo_body(inputs, num_anchors, num_classes, mod=False, pruning_mtx=(-1, -1, -1, -1, -1)):
    """Create YOLO_V3 model CNN body in Keras."""
    darknet = Model(inputs, mod_darknet_body(inputs, pruning_mtx)) if mod \
        else Model(inputs, darknet_body(inputs, pruning_mtx))

    x, y1 = make_last_layers(darknet.output, 512, num_anchors * (num_classes + 5))

    x = compose(
        DarknetConv2D_BN_Leaky(256, (1, 1)),
        UpSampling2D(2))(x)
    # x = Concatenate()([x, darknet.layers[152].output])
    x = Concatenate()([x, out2])
    x, y2 = make_last_layers(x, 256, num_anchors * (num_classes + 5))

    x = compose(
        DarknetConv2D_BN_Leaky(128, (1, 1)),
        UpSampling2D(2))(x)
    # x = Concatenate()([x, darknet.layers[92].output])
    x = Concatenate()([x, out1])
    x, y3 = make_last_layers(x, 128, num_anchors * (num_classes + 5))

    # model_1st_part = Model(inputs, output=cutting_layer_out)
    # model_2nd_part = Model(model_1st_part.output, output=cutting_layer_in)
    # TODO

    return Model(inputs, [y1, y2, y3])


def yolo_head(feats, anchors, num_classes, input_shape, calc_loss=False):
    """Convert final layer features to bounding box parameters."""
    num_anchors = len(anchors)
    # Reshape to batch, height, width, num_anchors, box_params.
    anchors_tensor = K.reshape(K.constant(anchors), [1, 1, 1, num_anchors, 2])

    grid_shape = K.shape(feats)[1:3]  # height, width
    grid_y = K.tile(K.reshape(K.arange(0, stop=grid_shape[0]), [-1, 1, 1, 1]),
                    [1, grid_shape[1], 1, 1])
    grid_x = K.tile(K.reshape(K.arange(0, stop=grid_shape[1]), [1, -1, 1, 1]),
                    [grid_shape[0], 1, 1, 1])
    grid = K.concatenate([grid_x, grid_y])
    grid = K.cast(grid, K.dtype(feats))

    feats = K.reshape(
        feats, [-1, grid_shape[0], grid_shape[1], num_anchors, num_classes + 5])

    # Adjust preditions to each spatial grid point and anchor size.
    box_xy = (K.sigmoid(feats[..., :2]) + grid) / K.cast(grid_shape[::-1], K.dtype(feats))
    box_wh = K.exp(feats[..., 2:4]) * anchors_tensor / K.cast(input_shape[::-1], K.dtype(feats))
    box_confidence = K.sigmoid(feats[..., 4:5])
    box_class_probs = K.sigmoid(feats[..., 5:])

    if calc_loss:
        return grid, feats, box_xy, box_wh
    return box_xy, box_wh, box_confidence, box_class_probs


def yolo_correct_boxes(box_xy, box_wh, input_shape, image_shape):
    """Get corrected boxes"""
    box_yx = box_xy[..., ::-1]
    box_hw = box_wh[..., ::-1]
    input_shape = K.cast(input_shape, K.dtype(box_yx))
    image_shape = K.cast(image_shape, K.dtype(box_yx))
    new_shape = K.round(image_shape * K.min(input_shape / image_shape))
    offset = (input_shape - new_shape) / 2. / input_shape
    scale = input_shape / new_shape
    box_yx = (box_yx - offset) * scale
    box_hw *= scale

    box_mins = box_yx - (box_hw / 2.)
    box_maxes = box_yx + (box_hw / 2.)
    boxes = K.concatenate([
        box_mins[..., 0:1],  # y_min
        box_mins[..., 1:2],  # x_min
        box_maxes[..., 0:1],  # y_max
        box_maxes[..., 1:2]  # x_max
    ])

    # Scale boxes back to original image shape.
    boxes *= K.concatenate([image_shape, image_shape])
    return boxes


def yolo_boxes_and_scores(feats, anchors, num_classes, input_shape, image_shape):
    """Process Conv layer output"""
    box_xy, box_wh, box_confidence, box_class_probs = yolo_head(feats,
                                                                anchors, num_classes, input_shape)
    boxes = yolo_correct_boxes(box_xy, box_wh, input_shape, image_shape)
    boxes = K.reshape(boxes, [-1, 4])
    box_scores = box_confidence * box_class_probs
    box_scores = K.reshape(box_scores, [-1, num_classes])
    return boxes, box_scores


def yolo_eval(yolo_outputs,
              anchors,
              num_classes,
              image_shape,
              max_boxes=20,
              score_threshold=.6,
              iou_threshold=.5):
    """Evaluate YOLO model on given input and return filtered boxes."""
    print(K.shape(yolo_outputs))
    num_layers = 3
    anchor_mask = [[6, 7, 8], [3, 4, 5], [0, 1, 2]] if num_layers == 3 else [[3, 4, 5], [1, 2, 3]]  # default setting
    input_shape = K.shape(yolo_outputs[0])[1:3] * 32
    boxes = []
    box_scores = []
    for l in range(num_layers):
        _boxes, _box_scores = yolo_boxes_and_scores(yolo_outputs[l],
                                                    anchors[anchor_mask[l]], num_classes, input_shape, image_shape)
        boxes.append(_boxes)
        box_scores.append(_box_scores)
    boxes = K.concatenate(boxes, axis=0)
    box_scores = K.concatenate(box_scores, axis=0)

    mask = box_scores >= score_threshold
    max_boxes_tensor = K.constant(max_boxes, dtype='int32')
    boxes_ = []
    scores_ = []
    classes_ = []
    for c in range(num_classes):
        class_boxes = tf.boolean_mask(boxes, mask[:, c])
        class_box_scores = tf.boolean_mask(box_scores[:, c], mask[:, c])
        nms_index = tf.image.non_max_suppression(
            class_boxes, class_box_scores, max_boxes_tensor, iou_threshold=iou_threshold)
        class_boxes = K.gather(class_boxes, nms_index)
        class_box_scores = K.gather(class_box_scores, nms_index)
        classes = K.ones_like(class_box_scores, 'int32') * c
        boxes_.append(class_boxes)
        scores_.append(class_box_scores)
        classes_.append(classes)
    boxes_ = K.concatenate(boxes_, axis=0)
    scores_ = K.concatenate(scores_, axis=0)
    classes_ = K.concatenate(classes_, axis=0)

    return boxes_, scores_, classes_


def preprocess_true_boxes(true_boxes, input_shape, anchors, num_classes):
    """Preprocess true boxes to training input format

    Parameters
    ----------
    true_boxes: array, shape=(m, T, 5)
        Absolute x_min, y_min, x_max, y_max, class_id relative to input_shape.
    input_shape: array-like, hw, multiples of 32
    anchors: array, shape=(N, 2), wh
    num_classes: integer

    Returns
    -------
    y_true: list of array, shape like yolo_outputs, xywh are reletive value

    """
    assert (true_boxes[..., 4] < num_classes).all(), 'class id must be less than num_classes'
    num_layers = len(anchors) // 3  # default setting
    anchor_mask = [[6, 7, 8], [3, 4, 5], [0, 1, 2]] if num_layers == 3 else [[3, 4, 5], [1, 2, 3]]

    true_boxes = np.array(true_boxes, dtype='float32')
    input_shape = np.array(input_shape, dtype='int32')
    boxes_xy = (true_boxes[..., 0:2] + true_boxes[..., 2:4]) // 2
    boxes_wh = true_boxes[..., 2:4] - true_boxes[..., 0:2]
    true_boxes[..., 0:2] = boxes_xy / input_shape[::-1]
    true_boxes[..., 2:4] = boxes_wh / input_shape[::-1]

    m = true_boxes.shape[0]
    grid_shapes = [input_shape // {0: 32, 1: 16, 2: 8}[l] for l in range(num_layers)]
    y_true = [np.zeros((m, grid_shapes[l][0], grid_shapes[l][1], len(anchor_mask[l]), 5 + num_classes),
                       dtype='float32') for l in range(num_layers)]

    # Expand dim to apply broadcasting.
    anchors = np.expand_dims(anchors, 0)
    anchor_maxes = anchors / 2.
    anchor_mins = -anchor_maxes
    valid_mask = boxes_wh[..., 0] > 0

    for b in range(m):
        # Discard zero rows.
        wh = boxes_wh[b, valid_mask[b]]
        if len(wh) == 0:
            continue
        # Expand dim to apply broadcasting.
        wh = np.expand_dims(wh, -2)
        box_maxes = wh / 2.
        box_mins = -box_maxes

        intersect_mins = np.maximum(box_mins, anchor_mins)
        intersect_maxes = np.minimum(box_maxes, anchor_maxes)
        intersect_wh = np.maximum(intersect_maxes - intersect_mins, 0.)
        intersect_area = intersect_wh[..., 0] * intersect_wh[..., 1]
        box_area = wh[..., 0] * wh[..., 1]
        anchor_area = anchors[..., 0] * anchors[..., 1]
        iou = intersect_area / (box_area + anchor_area - intersect_area)

        # Find best anchor for each true box
        best_anchor = np.argmax(iou, axis=-1)

        for t, n in enumerate(best_anchor):
            for l in range(num_layers):
                if n in anchor_mask[l]:
                    i = np.floor(true_boxes[b, t, 0] * grid_shapes[l][1]).astype('int32')
                    j = np.floor(true_boxes[b, t, 1] * grid_shapes[l][0]).astype('int32')
                    k = anchor_mask[l].index(n)
                    c = true_boxes[b, t, 4].astype('int32')
                    y_true[l][b, j, i, k, 0:4] = true_boxes[b, t, 0:4]
                    y_true[l][b, j, i, k, 4] = 1
                    y_true[l][b, j, i, k, 5 + c] = 1

    return y_true


def box_iou(b1, b2):
    """Return iou tensor

    Parameters
    ----------
    b1: tensor, shape=(i1,...,iN, 4), xywh
    b2: tensor, shape=(j, 4), xywh

    Returns
    -------
    iou: tensor, shape=(i1,...,iN, j)

    """

    # Expand dim to apply broadcasting.
    b1 = K.expand_dims(b1, -2)
    b1_xy = b1[..., :2]
    b1_wh = b1[..., 2:4]
    b1_wh_half = b1_wh / 2.
    b1_mins = b1_xy - b1_wh_half
    b1_maxes = b1_xy + b1_wh_half

    # Expand dim to apply broadcasting.
    b2 = K.expand_dims(b2, 0)
    b2_xy = b2[..., :2]
    b2_wh = b2[..., 2:4]
    b2_wh_half = b2_wh / 2.
    b2_mins = b2_xy - b2_wh_half
    b2_maxes = b2_xy + b2_wh_half

    intersect_mins = K.maximum(b1_mins, b2_mins)
    intersect_maxes = K.minimum(b1_maxes, b2_maxes)
    intersect_wh = K.maximum(intersect_maxes - intersect_mins, 0.)
    intersect_area = intersect_wh[..., 0] * intersect_wh[..., 1]
    b1_area = b1_wh[..., 0] * b1_wh[..., 1]
    b2_area = b2_wh[..., 0] * b2_wh[..., 1]
    iou = intersect_area / (b1_area + b2_area - intersect_area)

    return iou


def yolo_loss(args, anchors, num_classes, ignore_thresh=.5, print_loss=False):
    """Return yolo_loss tensor

    Parameters
    ----------
    args:
        yolo_outputs: list of tensor, the output of yolo_body or tiny_yolo_body,
        y_true: list of array, the output of preprocess_true_boxes
    anchors: array, shape=(N, 2), wh
    num_classes: integer
    ignore_thresh: float, the iou threshold whether to ignore object confidence loss
    print_loss: print the loss after evaluation

    Returns
    -------
    loss: tensor, shape=(1,)

    """
    num_layers = len(anchors) // 3  # default setting
    yolo_outputs = args[:num_layers]
    y_true = args[num_layers:]
    anchor_mask = [[6, 7, 8], [3, 4, 5], [0, 1, 2]] if num_layers == 3 else [[3, 4, 5], [1, 2, 3]]
    input_shape = K.cast(K.shape(yolo_outputs[0])[1:3] * 32, K.dtype(y_true[0]))
    grid_shapes = [K.cast(K.shape(yolo_outputs[l])[1:3], K.dtype(y_true[0])) for l in range(num_layers)]
    loss = 0
    m = K.shape(yolo_outputs[0])[0]  # batch size, tensor
    mf = K.cast(m, K.dtype(yolo_outputs[0]))

    for l in range(num_layers):
        object_mask = y_true[l][..., 4:5]
        true_class_probs = y_true[l][..., 5:]

        grid, raw_pred, pred_xy, pred_wh = yolo_head(yolo_outputs[l],
                                                     anchors[anchor_mask[l]], num_classes, input_shape, calc_loss=True)
        pred_box = K.concatenate([pred_xy, pred_wh])

        # Darknet raw box to calculate loss.
        raw_true_xy = y_true[l][..., :2] * grid_shapes[l][::-1] - grid
        raw_true_wh = K.log(y_true[l][..., 2:4] / anchors[anchor_mask[l]] * input_shape[::-1])
        raw_true_wh = K.switch(object_mask, raw_true_wh, K.zeros_like(raw_true_wh))  # avoid log(0)=-inf
        box_loss_scale = 2 - y_true[l][..., 2:3] * y_true[l][..., 3:4]

        # Find ignore mask, iterate over each of batch.
        ignore_mask = tf.TensorArray(K.dtype(y_true[0]), size=1, dynamic_size=True)
        object_mask_bool = K.cast(object_mask, 'bool')

        def loop_body(b, _ignore_mask):
            true_box = tf.boolean_mask(y_true[l][b, ..., 0:4], object_mask_bool[b, ..., 0])
            iou = box_iou(pred_box[b], true_box)
            best_iou = K.max(iou, axis=-1)
            _ignore_mask = _ignore_mask.write(b, K.cast(best_iou < ignore_thresh, K.dtype(true_box)))
            return b + 1, _ignore_mask

        _, ignore_mask = K.control_flow_ops.while_loop(lambda b, *_args: b < m, loop_body, [0, ignore_mask])
        ignore_mask = ignore_mask.stack()
        ignore_mask = K.expand_dims(ignore_mask, -1)


        obj_scale = 5
        xywh_scale = 0.5
        # K.binary_crossentropy is helpful to avoid exp overflow.
        # xy_loss = object_mask * box_loss_scale * K.binary_crossentropy(raw_true_xy, raw_pred[..., 0:2],
        #                                                               from_logits=True)
        xy_loss = xywh_scale * object_mask * box_loss_scale * K.square(raw_true_xy - raw_pred[..., 0:2])
        wh_loss = xywh_scale * object_mask * box_loss_scale * 0.5 * K.square(raw_true_wh - raw_pred[..., 2:4])

        confidence_loss = obj_scale * object_mask * K.binary_crossentropy(object_mask, raw_pred[..., 4:5], from_logits=True) + (
                (1 - object_mask) * K.binary_crossentropy(object_mask, raw_pred[..., 4:5], from_logits=True)
                * ignore_mask)
        class_loss = object_mask * K.binary_crossentropy(true_class_probs, raw_pred[..., 5:], from_logits=True)

        xy_loss = K.sum(xy_loss) / mf
        wh_loss = K.sum(wh_loss) / mf
        confidence_loss = K.sum(confidence_loss) / mf
        class_loss = K.sum(class_loss) / mf
        loss += xy_loss + wh_loss + confidence_loss + class_loss
        if print_loss:
            loss = tf.Print(loss, [loss, xy_loss, wh_loss, confidence_loss, class_loss, K.sum(ignore_mask)],
                            message='loss: ')
    return loss



































*******************************************************
Example params:
*******************************************************
320, 416, 608 input shapes were used in white paper (n*32 x n*32)

608x608:
python train_model.py -t yolo_v3 -s 608 608 -a /home/boti/Workspace/PyCharmWorkspace/training_data/yolo_anchors.txt -c /home/boti/Workspace/PyCharmWorkspace/training_data/voc_classes.txt -w /home/boti/Workspace/PyCharmWorkspace/weights/darknet53.h5 -f 2

416x416:
python train_model.py -t yolo_v3 -s 608 608 -a /home/boti/Workspace/PyCharmWorkspace/training_data/yolo_anchors.txt -c /home/boti/Workspace/PyCharmWorkspace/training_data/voc_classes.txt -w /home/boti/Workspace/PyCharmWorkspace/weights/darknet53.h5 -f 2


*******************************************************
DATASETS:
*******************************************************
BDD100K:
*folder structure:
bdd100k/images/100k/train|val/image_files
bdd100k/labels/100l/train_labels.json|val_labels.json
*image size:
 1280 x 720, 16:9
*format:
[
	//IMAGES
    {
        "name": "b1c66a42-6f7d68ca.jpg",
        "attributes": {
            "weather": "overcast",
            "scene": "city street",
            "timeofday": "daytime"
        },
        "timestamp": 10000,
        "labels": [
			//BOUNDING-BOXES
            {
                "category": "traffic sign",
                "attributes": {
                    "occluded": false,
                    "truncated": false,
                    "trafficLightColor": "none"
                },
                "manualShape": true,
                "manualAttributes": true,
                "box2d": {
                    "x1": 1000.698742,
                    "y1": 281.992415,
                    "x2": 1040.626872,
                    "y2": 326.91156
                },
                "id": 0
            },
			//...
			//POLYGONS
            {
                "category": "drivable area",
                "attributes": {
                    "areaType": "direct"
                },
                "manualShape": true,
                "manualAttributes": true,
                "poly2d": [
                    {
                        "vertices": [
                            [
                                241.143645,
                                697.923453
                            ],
                            [
                                541.525255,
                                380.564983
                            ],
                            [
                                583.948892,
                                378.069475
                            ],
                            [
                                960.034755,
                                676.955796
                            ],
                            [
                                715.911316,
                                664.974278
                            ],
                            [
                                491.257843,
                                664.974278
                            ],
                            [
                                241.143645,
                                697.923453
                            ]
                        ],
                        "types": "LLLLCCC",
                        "closed": true
                    }
                ],
                "id": 34
            },
			//...
        ]
    },
	//...
]

CityPersons:
*folder structure:
city_persons/images|labels/train|val/city_name/image_files
*image size:
 2048 x 1024, 2:1
*format:
for each image:
{
    "imgHeight": 1024,
    "imgWidth": 2048,
    "objects": [
        {
            "instanceId": 24000,
            "bbox": [
                892,
                445,
                21,
                53
            ],
            "bboxVis": [
                892,
                445,
                21,
                53
            ],
            "label": "sitting person"
        },
        //...
    ]
}

CityScapes:
*folder structure:
city_scapes/images|labels/train|val/city_name/image_files
*image size:
 2048 x 1024, 2:1
*format:
for each image:
{
    "imgHeight": 1024,
    "imgWidth": 2048,
    "objects": [
        //POLYGONS
        {
            "label": "sky",
            "polygon": [
                [
                    704,
                    191
                ],
                //...
            ]
        },
        //...
}

WildDash:
*folder structure:
wd/images/image_files
wd/labels/
*image size:
 1920 x 1080, 16:9
*format:
{
    "frame": "au0000_100000",
    "imgHeight": 1080,
    "imgWidth": 1920,
    "objects": [
		//POLYGONS
        {
            "label": "sky",
            "polygon": [
				//XYs
                [
                    140,
                    0
                ],
				//...
            ]
        },
		//...
	]
}

KITTI:
*folder structure:
kitti/images|labels/image_files|label_files
*image size:
 1245 x 375, 83:25 ~= 10:3
*format:
for each image:
//class .. .. .. x1 y1 x2 y2 ....
Car 0.80 0 -2.09 1013.39 182.46 1241.00 374.00 1.57 1.65 3.35 4.43 1.65 5.20 -1.42
Pedestrian 0.00 2 1.41 859.54 159.80 879.68 221.40 1.96 0.72 1.09 8.33 1.55 23.51 1.75


*******************************************************
TERVEZET:
*******************************************************
-> egységes labeling
Kell:
* közös formátumra hozás

Közös classok:
* class szűrés
* szótárak a classokhoz
* TODO: cityscapes-ből kiszűrni a gyalogosokat!!!!

Közös formátum:
//1 JSON PER 1 FOLDER
[
	//1 REGISTRY PER 1 IMAGE
	{
		"name": "image_index.jpg",
		"labels": [
			//1 REGISTRY PER 1 OBJECT (BOUNDING-BOX FORMAT)
			{
				"category": "category_name",
				// X1, Y1, X2, Y2 (TOP LEFT, BOTTOM RIGHT CORNERS)
				"box": {
					"x1": <x1 value>,
					"y1": <y1 value>,
					"x2": <y2 value>,
					"y2": <x2 value>
				}
			}, ...
		]
	}, ...
]

* egy mappához egy json
* numpy struktúra

-> átméretezés
Kell:
* átméretezés
* levágás, ha kell
* labelek igazítása az új képarányhoz

-> mappastruktúra

.
    bdd
        <labels.json>
        <image files>
        <batches>
    city
    kitti
    wd
    w_train
    w_pedestrian
    w_truck

Kell:
*classok szerinti osztályozás
*struktúra létrehozása, másolgatás

-> beolvasás
Kell:
* arányosan válogasson
* shuffle
* batchek beolvasásának megoldása (fix, bináris batchek mennének a legjobbak)


Közös furmátum:

BDD:
[
	//IMAGES
    {
        "name": "b1c66a42-6f7d68ca.jpg",
        //"attributes": {
            //"weather": "overcast",
            //"scene": "city street",
            //"timeofday": "daytime"
        //},
        //"timestamp": 10000,
        "labels": [
			//BOUNDING-BOXES
            {
                "category": "traffic sign",
                //"attributes": {
                //    "occluded": false,
                //    "truncated": false,
                //    "trafficLightColor": "none"
                //},
                //"manualShape": true,
                //"manualAttributes": true,
                "box2d": {
                    "x1": 1000.698742,
                    "y1": 281.992415,
                    "x2": 1040.626872,
                    "y2": 326.91156
                },
                //"id": 0
            },
			//...
        ]
    },
	//...
]

CityPerson:
+ egy fájlba
{
    //"imgHeight": 1024,
    //"imgWidth": 2048,
    "objects": [
        {
            //"instanceId": 24000,
            //"bbox": [
            //    892,
            //    445,
            //    21,
            //    53
            //],
            "bboxVis": [
                892,
                445,
                21,
                53
            ],
            "label": "sitting person"
		}
		//...
    ]
}

CityScapes:
+ egy fájlba
+ poly --> bbox
{
    //"imgHeight": 1024,
    //"imgWidth": 2048,
    "objects": [
        //POLYGONS
        {
            "label": "sky",
            "polygon": [
                [
                    704,
                    191
                ],
                //...
            ]
        },
        //...
}

WildDash:
+ poly --> bbox
+ egy fájlba
{
    "frame": "au0000_100000",
    //"imgHeight": 1080,
    //"imgWidth": 1920,
    "objects": [
		//POLYGONS
        {
            "label": "sky",
            "polygon": [
				//XYs
                [
                    140,
                    0
                ],
				//...
            ]
        },
		//...
	]
}










/home/boti/Workspace/PyCharmWorkspace/szdoga/venv/bin/python /home/boti/Workspace/PyCharmWorkspace/szdoga/data/evaluate_model.py
Using TensorFlow backend.
/media/boti/Adatok/Datasets-pc/_on_rails
167
349
105
/media/boti/Adatok/Datasets-pc/_two_wheeler
1141
9
6386
2120
/media/boti/Adatok/Datasets-pc/_person
2750
11
1796
/media/boti/Adatok/Datasets-pc/_truck
24726
855
36
2820
/media/boti/Adatok/Datasets-pc/_bdd-only
69863
/media/boti/Adatok/Datasets-pc/_others
70
3475
7481
/media/boti/Adatok/Datasets-pc/_validation
10000
0. block was pruned:
2018-11-30 04:01:58.156642: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:964] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2018-11-30 04:01:58.156996: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1411] Found device 0 with properties:
name: GeForce GTX 1050 Ti major: 6 minor: 1 memoryClockRate(GHz): 1.4805
pciBusID: 0000:02:00.0
totalMemory: 3.94GiB freeMemory: 3.38GiB
2018-11-30 04:01:58.157012: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:01:58.374012: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:01:58.374042: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:01:58.374049: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:01:58.374177: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
26.91582932900201
mean_avg_precision: 0.7564255808549146
mean_avg_recall: 0.3349300311909384
avg_duration: 0.19249821034593492
2018-11-30 04:02:35.927247: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:02:35.927283: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:02:35.927290: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:02:35.927296: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:02:35.927388: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
1. block was pruned:
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.677276885995525
mean_avg_precision: 0.772844949330098
mean_avg_recall: 0.2960834250552295
avg_duration: 0.18062985457432695
2. block was pruned:
2018-11-30 04:03:12.927358: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:03:12.927391: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:03:12.927398: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:03:12.927404: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:03:12.927493: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.92450075999659
mean_avg_precision: 0.7272639982162404
mean_avg_recall: 0.34984716435599034
avg_duration: 0.18363060062400488
2018-11-30 04:03:50.785752: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:03:50.785785: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:03:50.785792: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:03:50.785798: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:03:50.785890: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
3. block was pruned:
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.70764289300132
mean_avg_precision: 0.7363310109206408
mean_avg_recall: 0.3281897790238957
avg_duration: 0.18235260762385494
2018-11-30 04:04:28.446618: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:04:28.446651: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:04:28.446658: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:04:28.446664: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:04:28.446752: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
4. block was pruned:
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.294748760999937
mean_avg_precision: 0.7051403976855343
mean_avg_recall: 0.30224110703199986
avg_duration: 0.1799250794454313
2018-11-30 04:05:04.782668: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:05:04.782699: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:05:04.782706: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:05:04.782711: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:05:04.782802: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
5. block was pruned:
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.22404792100133
mean_avg_precision: 0.7394255359601893
mean_avg_recall: 0.29086613366178926
avg_duration: 0.18009316892087077
6. block was pruned:
2018-11-30 04:05:40.793681: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:05:40.793713: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:05:40.793720: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:05:40.793726: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:05:40.793816: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.51036879199819
mean_avg_precision: 0.7192275109863929
mean_avg_recall: 0.28877897912231154
avg_duration: 0.18141409809841477
2018-11-30 04:06:18.652442: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:06:18.652474: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:06:18.652481: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:06:18.652487: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:06:18.652574: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
7. block was pruned:
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.83119809300115
mean_avg_precision: 0.7456902536696699
mean_avg_recall: 0.31657432719326556
avg_duration: 0.18283077546559323
2018-11-30 04:06:56.156103: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:06:56.156133: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:06:56.156140: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:06:56.156145: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:06:56.156238: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
8. block was pruned:
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.240242105996003
mean_avg_precision: 0.7671036746531794
mean_avg_recall: 0.3013137066116543
avg_duration: 0.17966464830713466
2018-11-30 04:07:32.602969: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:07:32.603001: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:07:32.603008: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:07:32.603014: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:07:32.603107: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
9. block was pruned:
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.810268492998148
mean_avg_precision: 0.753562986431668
mean_avg_recall: 0.30813644730851514
avg_duration: 0.18147066363325404
10. block was pruned:
2018-11-30 04:08:10.037267: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:08:10.037298: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:08:10.037306: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:08:10.037314: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:08:10.037420: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
26.305510891994345
mean_avg_precision: 0.7487215865124088
mean_avg_recall: 0.3021499568433692
avg_duration: 0.18270536903943174
11. block was pruned:
2018-11-30 04:08:48.329863: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:08:48.329908: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:08:48.329923: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:08:48.329934: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:08:48.330061: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.659180144997663
mean_avg_precision: 0.7016315897630628
mean_avg_recall: 0.29590535746974084
avg_duration: 0.1797899442376502
2018-11-30 04:09:26.203318: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:09:26.203350: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:09:26.203357: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:09:26.203363: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:09:26.203452: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
12. block was pruned:
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
26.006906185000844
mean_avg_precision: 0.766082528199746
mean_avg_recall: 0.27530141202906006
avg_duration: 0.1838813073268779
2018-11-30 04:10:04.754361: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:10:04.754393: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:10:04.754409: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:10:04.754415: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:10:04.754514: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
13. block was pruned:
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.637196109993965
mean_avg_precision: 0.7582869001185832
mean_avg_recall: 0.25761464136492096
avg_duration: 0.1825330667430391
2018-11-30 04:10:42.955507: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:10:42.955540: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:10:42.955547: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:10:42.955553: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:10:42.955642: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
14. block was pruned:
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.79530252100085
mean_avg_precision: 0.7570913785999769
mean_avg_recall: 0.2796001320598385
avg_duration: 0.18367459337605396
15. block was pruned:
2018-11-30 04:11:21.143143: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:11:21.143178: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:11:21.143185: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:11:21.143191: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:11:21.143287: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.446361383001204
mean_avg_precision: 0.7676549797836928
mean_avg_recall: 0.28649403870986045
avg_duration: 0.18103160476276023
2018-11-30 04:11:58.310089: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:11:58.310122: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:11:58.310129: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:11:58.310134: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:11:58.310216: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
16. block was pruned:
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.496965778998856
mean_avg_precision: 0.7433694945124765
mean_avg_recall: 0.30485354120654706
avg_duration: 0.18181990405978601
2018-11-30 04:12:35.104760: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:12:35.104793: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:12:35.104801: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:12:35.104806: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:12:35.104896: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
17. block was pruned:
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.21757849599817
mean_avg_precision: 0.7431665994905253
mean_avg_recall: 0.30880898099372217
avg_duration: 0.17950139243598326
18. block was pruned:
2018-11-30 04:13:11.341266: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:13:11.341298: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:13:11.341306: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:13:11.341311: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:13:11.341391: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.20155737800087
mean_avg_precision: 0.770149000194137
mean_avg_recall: 0.2979368605820649
avg_duration: 0.17931965353463875
19. block was pruned:
2018-11-30 04:13:47.434234: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:13:47.434266: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:13:47.434273: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:13:47.434279: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:13:47.438223: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.209478734002914
mean_avg_precision: 0.7544339902469136
mean_avg_recall: 0.3048396896562415
avg_duration: 0.17934429364318966
20. block was pruned:
2018-11-30 04:14:24.117074: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:14:24.117116: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:14:24.117123: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:14:24.117129: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:14:24.117233: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.563181008001266
mean_avg_precision: 0.706490467489176
mean_avg_recall: 0.3356783943639844
avg_duration: 0.1797750744851085
2018-11-30 04:15:00.620335: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:15:00.620366: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:15:00.620373: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:15:00.620378: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:15:00.620458: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
21. block was pruned:
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.339914361997216
mean_avg_precision: 0.8013316457696189
mean_avg_recall: 0.21144721555877063
avg_duration: 0.18032675636634013
2018-11-30 04:15:38.674514: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:15:38.674549: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:15:38.674566: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:15:38.674572: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:15:38.674702: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
22. block was pruned:
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
24.911825679002504
mean_avg_precision: 1.0
mean_avg_recall: 0.0
avg_duration: 0.18079675062378583
23. block was pruned:
2018-11-30 04:16:15.162918: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1490] Adding visible gpu devices: 0
2018-11-30 04:16:15.162950: I tensorflow/core/common_runtime/gpu/gpu_device.cc:971] Device interconnect StreamExecutor with strength 1 edge matrix:
2018-11-30 04:16:15.162957: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977]      0
2018-11-30 04:16:15.162963: I tensorflow/core/common_runtime/gpu/gpu_device.cc:990] 0:   N
2018-11-30 04:16:15.163055: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1103] Created TensorFlow device (/job:localhost/replica:0/task:0/device:GPU:0 with 3092 MB memory) -> physical GPU (device: 0, name: GeForce GTX 1050 Ti, pci bus id: 0000:02:00.0, compute capability: 6.1)
n_layers: 252
/home/boti/Workspace/PyCharmWorkspace/szdoga/trained_weights/trained_weights_stage_1.h5 model, anchors, and classes loaded.
Tensor("Shape:0", shape=(5,), dtype=int32)
25.02523723199556
mean_avg_precision: 0.8388411643362137
mean_avg_recall: 0.16538061708912483
avg_duration: 0.17894611697988919

Process finished with exit code 0














































